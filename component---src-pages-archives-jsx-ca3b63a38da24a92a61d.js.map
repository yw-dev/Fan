{"version":3,"sources":["webpack:///./src/pages/archives.jsx"],"names":["Archives","_ref","pageContext","data","archive","spath","posts","allMarkdownRemark","edges","archives","forEach","_ref2","node","frontmatter","date","dates","split","push","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_2__","layouts__WEBPACK_IMPORTED_MODULE_7__","react_helmet__WEBPACK_IMPORTED_MODULE_4___default","a","title","config","siteTitle","components__WEBPACK_IMPORTED_MODULE_6__","path","keyword","map","_ref3","key","id","cover","childImageSharp","fluid","stype","type","tags","excerpt","propTypes","PropTypes","shape","string","isRequired","arrayOf","object","array","categores","query"],"mappings":"yOAQMA,EAAW,SAAAC,GAA2B,IAAxBC,EAAwBD,EAAxBC,YAAaC,EAAWF,EAAXE,KAChBC,GAAYF,EAAnBG,MAAmBH,EAAZE,SACTE,EAAQH,EAAKI,kBAAkBC,MAC/BC,EAAW,GAUjB,OATAH,EAAMI,QAAQ,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACf,GAAIA,EAAKC,YAAYC,KAAM,CACzB,IAAIC,EAAQH,EAAKC,YAAYC,KAAKE,MAAM,KACnCP,EAASM,EAAM,GAAG,IAAIA,EAAM,MAC/BN,EAASM,EAAM,GAAG,IAAIA,EAAM,IAAM,IAEpCN,EAASM,EAAM,GAAG,IAAIA,EAAM,IAAIE,KAAKL,MAIvCM,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,KACEF,OAAAC,EAAA,EAAAD,CAACG,EAAAC,EAAD,CAAQC,MAAK,QAAUC,IAAOC,YAC9BP,OAAAC,EAAA,EAAAD,CAACQ,EAAA,EAAD,CAAQH,MAAK,GAAKC,IAAOC,YACzBP,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,KACEF,OAAAC,EAAA,EAAAD,CAACQ,EAAA,EAAD,CAAYC,KAAK,OAAOJ,MAAM,KAAKK,QAAQ,SAC1CnB,EAASL,GAASyB,IAAI,SAAAC,GAAA,IAAGlB,EAAHkB,EAAGlB,KAAH,OACrBM,OAAAC,EAAA,EAAAD,CAACQ,EAAA,EAAD,CACEK,IAAKnB,EAAKoB,GACVC,MAAOrB,EAAKC,YAAYoB,MAAMC,gBAAgBC,MAC9CC,MAAOxB,EAAKC,YAAYwB,KACxBV,KAAMf,EAAKC,YAAYc,KACvBJ,MAAOX,EAAKC,YAAYU,MACxBT,KAAMF,EAAKC,YAAYC,KACvBwB,KAAM1B,EAAKC,YAAYyB,KACvBC,QAAS3B,EAAK2B,eAQXvC,YAEfA,EAASwC,UAAY,CACnBtC,YAAauC,IAAUC,MAAM,CAC3BrC,MAAOoC,IAAUE,OAAOC,WACxBxC,QAASqC,IAAUE,OAAOC,aAE5BzC,KAAMsC,IAAUC,MAAM,CACpBnC,kBAAmBkC,IAAUC,MAAM,CACjClC,MAAOiC,IAAUI,QACfJ,IAAUC,MAAM,CACd9B,KAAM6B,IAAUC,MAAM,CACpBH,QAASE,IAAUE,OACnB9B,YAAa4B,IAAUC,MAAM,CAC3BT,MAAOQ,IAAUK,OAAOF,WACxBjB,KAAMc,IAAUE,OAAOC,WACvBrB,MAAOkB,IAAUE,OAAOC,WACxB9B,KAAM2B,IAAUE,OAAOC,WACvBN,KAAMG,IAAUM,MAChBC,UAAWP,IAAUE,OAAOC,WAC5BP,KAAMI,IAAUE,OAAOC,iBAG1BA,iBAMJ,IAAMK,EAAK","file":"component---src-pages-archives-jsx-ca3b63a38da24a92a61d.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { Header, BlogList, ContentNav } from 'components';\nimport { Layout, Container } from 'layouts';\nimport config from '../../config/site';\n\nconst Archives = ({ pageContext, data }) => {\n  const { spath, archive } = pageContext;\n  const posts = data.allMarkdownRemark.edges;\n  const archives = [];\n  posts.forEach(({ node }) => {\n    if (node.frontmatter.date) {\n      var dates = node.frontmatter.date.split('-');\n      if (!archives[dates[0]+'-'+dates[1]]) {\n        archives[dates[0]+'-'+dates[1]] = [];\n      }\n      archives[dates[0]+'-'+dates[1]].push(node);\n    }\n  });\n  return (\n    <Layout>\n      <Helmet title={`文章 | ${config.siteTitle}`} />\n      <Header title={`${config.siteTitle}`}></Header>\n      <Container>\n        <ContentNav path=\"blog\" title=\"文章\" keyword=\"全部文章\"></ContentNav>\n        {archives[archive].map(({ node }) => (\n          <BlogList\n            key={node.id}\n            cover={node.frontmatter.cover.childImageSharp.fluid}\n            stype={node.frontmatter.type}\n            path={node.frontmatter.path}\n            title={node.frontmatter.title}\n            date={node.frontmatter.date}\n            tags={node.frontmatter.tags}\n            excerpt={node.excerpt}\n          />\n        ))}\n      </Container>\n    </Layout>\n  );\n};\n\nexport default Archives;\n\nArchives.propTypes = {\n  pageContext: PropTypes.shape({\n    spath: PropTypes.string.isRequired,\n    archive: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            excerpt: PropTypes.string,\n            frontmatter: PropTypes.shape({\n              cover: PropTypes.object.isRequired,\n              path: PropTypes.string.isRequired,\n              title: PropTypes.string.isRequired,\n              date: PropTypes.string.isRequired,\n              tags: PropTypes.array,\n              categores: PropTypes.string.isRequired,\n              type: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n};\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 200)\n          frontmatter {\n            title\n            path\n            tags\n            type\n            categores\n            date(formatString: \"YYYY-MM-DD\")\n            cover {\n              childImageSharp {\n                fluid(\n                  maxWidth: 1000\n                  quality: 90\n                  traceSVG: { color: \"#2B2B2F\" }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}