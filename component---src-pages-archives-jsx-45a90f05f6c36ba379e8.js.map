{"version":3,"sources":["webpack:///./src/pages/archives.jsx"],"names":["Archives","_ref","pageContext","data","archive","spath","posts","allMarkdownRemark","edges","archives","forEach","_ref2","node","frontmatter","date","dates","split","push","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_3__","layouts__WEBPACK_IMPORTED_MODULE_10__","react_helmet__WEBPACK_IMPORTED_MODULE_7___default","a","title","config","siteTitle","components__WEBPACK_IMPORTED_MODULE_9__","path","keyword","key","id","cover","childImageSharp","fluid","stype","type","tags","excerpt","__webpack_exports__","props","gatsby__WEBPACK_IMPORTED_MODULE_6__","query","render","_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0___default","_public_static_d_2980575510_json__WEBPACK_IMPORTED_MODULE_4__","propTypes","PropTypes","shape","string","isRequired","arrayOf","object","array","categores"],"mappings":"yOAQMA,EAAW,SAAAC,GAA2B,IAAxBC,EAAwBD,EAAxBC,YAAaC,EAAWF,EAAXE,KAChBC,GAAYF,EAAnBG,MAAmBH,EAAZE,SACTE,EAAQH,EAAKI,kBAAkBC,MAC/BC,EAAW,GACjBH,EAAMI,QAAQ,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACf,GAAIA,EAAKC,YAAYC,KAAM,CACzB,IAAIC,EAAQH,EAAKC,YAAYC,KAAKE,MAAM,KACnCP,EAASM,EAAM,GAAG,IAAIA,EAAM,MAC/BN,EAASM,EAAM,GAAG,IAAIA,EAAM,IAAM,IAEpCN,EAASM,EAAM,GAAG,IAAIA,EAAM,IAAIE,KAAKL,MAG5BH,EAASL,GACtB,OACEc,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,KACEF,OAAAC,EAAA,EAAAD,CAACG,EAAAC,EAAD,CAAQC,MAAK,QAAUC,IAAOC,YAC9BP,OAAAC,EAAA,EAAAD,CAACQ,EAAA,EAAD,CAAQH,MAAK,GAAKC,IAAOC,YACzBP,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,KACEF,OAAAC,EAAA,EAAAD,CAACQ,EAAA,EAAD,CAAYC,KAAK,OAAOJ,MAAM,KAAKK,QAASxB,IAC3CE,EAAMI,QAAQ,SAAAE,GAAI,OACjBM,OAAAC,EAAA,EAAAD,CAACQ,EAAA,EAAD,CACEG,IAAKjB,EAAKkB,GACVC,MAAOnB,EAAKC,YAAYkB,MAAMC,gBAAgBC,MAC9CC,MAAOtB,EAAKC,YAAYsB,KACxBR,KAAMf,EAAKC,YAAYc,KACvBJ,MAAOX,EAAKC,YAAYU,MACxBT,KAAMF,EAAKC,YAAYC,KACvBsB,KAAMxB,EAAKC,YAAYuB,KACvBC,QAASzB,EAAKyB,eAQXC,EAAA,iBAAAC,GAAK,OAClBrB,OAAAC,EAAA,EAAAD,CAACsB,EAAA,YAAD,CACEC,MAAK,aA+BPC,OAAQ,SAAAvC,GAAI,OAAIe,OAAAC,EAAA,EAAAD,CAAClB,EAAD2C,IAAA,CAAUxC,KAAMA,GAAUoC,KAhC1CpC,KAAAyC,KAoCF5C,EAAS6C,UAAY,CACnB3C,YAAa4C,IAAUC,MAAM,CAC3B1C,MAAOyC,IAAUE,OAAOC,WACxB7C,QAAS0C,IAAUE,OAAOC,aAE5B9C,KAAM2C,IAAUC,MAAM,CACpBxC,kBAAmBuC,IAAUC,MAAM,CACjCvC,MAAOsC,IAAUI,QACfJ,IAAUC,MAAM,CACdnC,KAAMkC,IAAUC,MAAM,CACpBV,QAASS,IAAUE,OACnBnC,YAAaiC,IAAUC,MAAM,CAC3BhB,MAAOe,IAAUK,OAAOF,WACxBtB,KAAMmB,IAAUE,OAAOC,WACvB1B,MAAOuB,IAAUE,OAAOC,WACxBd,KAAMW,IAAUE,OAChBlC,KAAMgC,IAAUE,OAAOC,WACvBb,KAAMU,IAAUM,MAChBC,UAAWP,IAAUE,OAAOC,iBAG/BA","file":"component---src-pages-archives-jsx-45a90f05f6c36ba379e8.js","sourcesContent":["import React from 'react';\nimport { StaticQuery, graphql, Link } from 'gatsby';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { Header, BlogList, ContentNav } from 'components';\nimport { Layout, Container } from 'layouts';\nimport config from '../../config/site';\n\nconst Archives = ({ pageContext, data }) => {\n  const { spath, archive } = pageContext;\n  const posts = data.allMarkdownRemark.edges;\n  const archives = [];\n  posts.forEach(({ node }) => {\n    if (node.frontmatter.date) {\n      var dates = node.frontmatter.date.split('-');\n      if (!archives[dates[0]+'-'+dates[1]]) {\n        archives[dates[0]+'-'+dates[1]] = [];\n      }\n      archives[dates[0]+'-'+dates[1]].push(node);\n    }\n  });\n  const list = archives[archive];\n  return (\n    <Layout>\n      <Helmet title={`归档 | ${config.siteTitle}`} />\n      <Header title={`${config.siteTitle}`}></Header>\n      <Container>\n        <ContentNav path=\"blog\" title=\"归档\" keyword={archive}></ContentNav>\n        {posts.forEach(node => (\n          <BlogList\n            key={node.id}\n            cover={node.frontmatter.cover.childImageSharp.fluid}\n            stype={node.frontmatter.type}\n            path={node.frontmatter.path}\n            title={node.frontmatter.title}\n            date={node.frontmatter.date}\n            tags={node.frontmatter.tags}\n            excerpt={node.excerpt}\n          />\n        ))}\n      </Container>\n    </Layout>\n  );\n};\n\nexport default props => (\n  <StaticQuery\n    query={graphql`\n    query {\n      allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n        edges {\n          node {\n            id\n            excerpt(pruneLength: 200)\n            frontmatter {\n              title\n              path\n              tags\n              type\n              categores\n              date(formatString: \"YYYY-MM-DD\")\n              cover {\n                childImageSharp {\n                  fluid(\n                    maxWidth: 1000\n                    quality: 90\n                    traceSVG: { color: \"#2B2B2F\" }\n                  ) {\n                    ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `}\n  render={data => <Archives data={data} {...props} />}\n/>\n)\n\nArchives.propTypes = {\n  pageContext: PropTypes.shape({\n    spath: PropTypes.string.isRequired,\n    archive: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            excerpt: PropTypes.string,\n            frontmatter: PropTypes.shape({\n              cover: PropTypes.object.isRequired,\n              path: PropTypes.string.isRequired,\n              title: PropTypes.string.isRequired,\n              type: PropTypes.string,\n              date: PropTypes.string.isRequired,\n              tags: PropTypes.array,\n              categores: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n};\n"],"sourceRoot":""}